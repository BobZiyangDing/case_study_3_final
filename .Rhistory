t <- president_polls_2020$days_to_election + 1 #WHY PLUS ONE?
N_polls <- y %>% length
N_states <- states %>% length
N_days <- t %>% max
jags_data <- list(y=y,t=t,r=r,
N_polls=N_polls,N_states=N_states,N_days=N_days)
model_mv <- function(){
for(k in 1:N_polls){
y[k] ~ dnorm(p[k],1/sigma2_y[r[k]]) #note no longer binomial
p[k] = theta[r[k],t[k]]
}
for(j in 2:N_days){
theta[1:N_states,j] ~ dmnorm(theta[1:N_states,j-1],Phi)
}
Phi ~ dwish(I_states,N_states+1) #fill in wishart parameters, google JAGS wishart distribution should turn it up
Sigma = inverse(Phi)
#which, Phi or Sigma is the covariance and which is the precision?
#optional: theta[1:N_states,1] ~ dmnorm(mu0,s0) #define mu0 and s0 in your jags_data object
#Use your hierarhciacl prior for sigma2_y from before
for(j in 1:N_states){
sigma2_y[j] = 1/sigma2_y_inv[j]
sigma2_y_inv[j] ~ dgamma(nu_y,nu_y*tau_y)
theta[j,1] ~ dnorm(mu0,pow(sigma2_0,-1))
}
nu_y ~ dunif(0,100)
tau_y ~ dunif(0,100)
nu_beta ~ dunif(0,100)
tau_beta ~ dunif(0,100)
mu0 ~ dnorm(50,pow(7.5,-2))
sigma2_0 = 1/sigma2_0_inv
sigma2_0_inv ~ dgamma(.5,.5)
}
jags_data <- list(y=y,t=t,r=r,
N_polls=N_polls,N_states=N_states,N_days=N_days)
jags_data$I_states <- diag(N_states)
#be sure to add your added parameters to parameters.to.save
jags_sims_mv <- jags(data = jags_data,model.file = model_mv,parameters.to.save = c("theta","Sigma",
"p","sigma2_y"),
n.iter = 100)
poll_plot_data <- tibble(y=jags_data$y,t=jags_data$t %>% as.integer(),state = states[jags_data$r])
beta_plot_data <- lapply(1:N_states,function(st){
sims <- jags_sims_mv$BUGSoutput$sims.list$theta[,st,]
data.frame(state = states[st],t=1:N_days,mean=colMeans(sims),lb=apply(sims,2,quantile,probs=.025),ub=apply(sims,2,quantile,probs=.975))
}) %>%
bind_rows()
swing_state_traj <- left_join(beta_plot_data,poll_plot_data) %>%
ggplot(aes(x=t)) +
geom_line(aes(y=mean)) +
geom_ribbon(aes(ymin = lb,ymax = ub),alpha = .2) +
geom_point(aes(y=y)) +
scale_x_reverse() +
facet_wrap(~ state)
poll_plot_data$p <- jags_sims_mv$BUGSoutput$mean$p
poll_plot_data$sigma2y <- jags_sims_mv$BUGSoutput$mean$sigma2_y[jags_data$r]
poll_plot_data$binom_v <- (poll_plot_data$p)*(100-poll_plot_data$p)/ president_polls_2020$number.of.observations
#
president_var <- poll_plot_data %>%
ggplot(aes(x=binom_v)) +
geom_density() +
geom_vline(aes(xintercept = sigma2y),color = "red") +
facet_wrap(~ state)
sims <- jags_sims_mv$BUGSoutput$sims.list$theta[,,1]
colnames(sims) <- states
swing_state_win_prob <- as.data.frame(sims %>% {.>50} %>% colMeans())
names(swing_state_win_prob) <- "Winning Probability"
swing_state_win_prob <- kable(swing_state_win_prob, caption = "Swing State Winning Probability")
swing_state_share_interval <- kable(colQuantiles(sims, probs=c(0.025, 0.5, 0.975)), caption = "Swing State Share Percentage Interval Estimate")
#in other states: Biden: 232-13, Trump: 306-29-18-15-10-20
# c_ex_votes <- 232-13; t_ex_votes <- 306-29-18-15-10-20
ec_votes <- ((sims>50) %*% diag(c(0,29,15,18,20,13,10))) %>% rowSums() + 232
ec_vote_mean <- mean(ec_votes)
ec_vote_qt <- quantile(ec_votes, probs=c(0.025, 0.975))
ec_vertical_lines <- c(ec_vote_qt[1], ec_vote_mean, ec_vote_qt[2])
ec_dis <- ggplot() + aes(ec_votes)+ geom_histogram(binwidth=5) + ggtitle("Electorial College Vote Share Distribution") + geom_vline(xintercept = ec_vertical_lines )
ec_interval <- kable(quantile(ec_votes, probs = c(0.025, 0.975) ), caption="EC Vote Total")
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
get_heatmap <- function(cormat){
cormat %>%
cov2cor() %>%
reorder_cormat %>%
get_upper_tri %>%
reshape2::melt(na.rm = TRUE) %>%
ggplot(aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+ # minimal theme
labs(x="",y="") +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
}
cor_sims <- array(NA,dim = jags_sims_mv$BUGSoutput$sims.list$Sigma %>% dim)
for(i in 1:dim(cor_sims)[1]){
cor_sims[i,,] <- cov2cor(jags_sims_mv$BUGSoutput$sims.list$Sigma[i,,])
}
cor_mean <- apply(cor_sims,c(2,3),mean)
colnames(cor_mean) <- states
rownames(cor_mean) <- states
#full heatmap
get_heatmap(cor_mean)
senator <- read_csv("senate_polls.csv")
senator$days_to_election = as.Date(senator$election_date, "%m/%d/%Y") - as.Date(senator$end_date, "%m/%d/%Y")
senator <- senator %>% filter(candidate_party %in% c("DEM","REP"))
senator$state <- ifelse(senator$state == "NA","US",senator$state)
senator <- senator %>% filter(days_to_election <= 100)
states <- senator$state %>% unique
senator$y = ifelse(senator$candidate_party == "REP", senator$pct, 100-senator$pct) # support ratio for rep
senator$r <- match(senator$state, states)
senator$t <- senator$days_to_election + 1 #WHY PLUS ONE?
senator_y<- senator$y
senator_r<- senator$r
senator_t<- senator$t
N_polls <- senator_y %>% length
N_states <- states %>% length
N_days <- senator_t %>% max
model_senator <- function(){
for(k in 1:N_polls)
{
y[k] ~ dnorm(p[k],1/sigma2_y[r[k]]) #note no longer binomial
p[k] = theta[r[k],t[k]]
}
for(j in 2:N_days)
{
theta[1:N_states,j] ~ dmnorm(theta[1:N_states,j-1],Phi)
}
Phi ~ dwish(I_states,N_states+1) #fill in wishart parameters, google JAGS wishart distribution should turn it up
Sigma = inverse(Phi)
#which, Phi or Sigma is the covariance and which is the precision?
#optional: theta[1:N_states,1] ~ dmnorm(mu0,s0) #define mu0 and s0 in your jags_data object
#Use your hierarhciacl prior for sigma2_y from before
for(j in 1:N_states){
sigma2_y[j] = 1/sigma2_y_inv[j]
sigma2_y_inv[j] ~ dgamma(nu_y,nu_y*tau_y)
theta[j,1] ~ dnorm(mu0,pow(sigma2_0,-1))
}
nu_y ~ dunif(0,100)
tau_y ~ dunif(0,100)
nu_beta ~ dunif(0,100)
tau_beta ~ dunif(0,100)
mu0 ~ dnorm(50,pow(7.5,-2))
sigma2_0 = 1/sigma2_0_inv
sigma2_0_inv ~ dgamma(.5,.5)
}
senator_jags_data <- list(y=senator_y,t=senator_t,r=senator_r,
N_polls=N_polls,N_states=N_states,N_days=N_days)
senator_jags_data$I_states <- diag(N_states)
#be sure to add your added parameters to parameters.to.save
jags_sims_senator <- jags(data = senator_jags_data,
model.file = model_senator,
parameters.to.save = c("theta","Sigma","p","sigma2_y"),
n.iter = 100)
senator_poll_plot_data$p <- jags_sims_senator$BUGSoutput$mean$p
senator_poll_plot_data$sigma2y <- jags_sims_senator$BUGSoutput$mean$sigma2_y[senator_jags_data$r]
senator_poll_plot_data$binom_v <- (senator_poll_plot_data$p)*(100-senator_poll_plot_data$p)/ senator$sample_size
senator_var <- senator_poll_plot_data %>%
ggplot(aes(x=binom_v)) +
geom_density() +
geom_vline(aes(xintercept = sigma2y),color = "red") +
facet_wrap(~ state)
senator_sims <- jags_sims_senator$BUGSoutput$sims.list$theta[,,1]
colnames(senator_sims) <- states
senator_all_state_prob <- as.data.frame(senator_sims %>% {.>50} %>% colMeans())
names(senator_all_state_prob) <- "Winning Probability"
senator_all_state_prob <- kable(senator_all_state_prob, caption = "Senator All State Winning Probability")
swing_state_share_interval <- kable(colQuantiles(senator_sims, probs=c(0.025, 0.5, 0.975)), caption = "Senator All State Vote Share Percentage Interval Estimate")
temp <- as.data.frame( t(senator_sims %>% {.>50} %>% colMeans()) )
longnames <- NULL
interval_nc_senate <- quantile(as.data.frame(senator_sims)$`North Carolina`,  probs = c(0.025, 0.5, 0.975))
nc_senate_share_qt <- kable(interval_nc_senate, caption="North Carolina Vote Share Interval Estimate")
mean_nc_senate_prob <- temp$`North Carolina`
nc_senate_share <- ggplot() + aes(interval_nc_senate)+ geom_histogram() + geom_density(fill="blue", alpha=0.3) + ggtitle("NC Tom Tillis Voter Share Distribution") + geom_vline(xintercept = mean(interval_nc_senate))
tom_win_prob <- mean({as.data.frame(senator_sims)$`North Carolina` > 50})
total_rep_senate <-  as.numeric(( { senator_sims >50 } * 2) %>% rowSums() +2)
senate_dis <- ggplot() + aes(total_rep_senate)+ geom_histogram(binwidth=2) + ggtitle("Distribution of Senators In REP of Whole Nation") + geom_vline(xintercept = mean(total_rep_senate))
rep_senate_prob <- mean( { total_rep_senate > 50}   )
history <- readRDS("ncvhis_Statewide_small.rds")
history$election_lbl <- as.Date(history$election_lbl,  "%m/%d/%y")
history$cong_dist_abbrv[history$county_desc == "BUNCOMBE"] <- 11
history$cong_dist_abbrv[history$county_desc == "ALLEGHANY"] <- 5
history$cong_dist_abbrv[history$county_desc == "DAVIDSON"] <- 13
history$cong_dist_abbrv[history$county_desc == "BUNCOMBE"] <- 11
history$cong_dist_abbrv[history$county_desc == "CLAY"] <- 11
history$cong_dist_abbrv[history$county_desc == "POLK"] <- 11
history$cong_dist_abbrv[history$county_desc == "CALDWELL"] <- 5
history$cong_dist_abbrv[history$county_desc == "VANCE"] <- 1
history$cong_dist_abbrv[history$county_desc == "RICHMOND"] <- 9
history$cong_dist_abbrv[history$county_desc == "MECKLENBURG"] <- 12
history$cong_dist_abbrv[history$county_desc == "ROBESON"] <- 9
history$cong_dist_abbrv[history$county_desc == "CUMBERLAND"] <- 8
history$cong_dist_abbrv[history$county_desc == "CABARRUS"] <- 8
history$cong_dist_abbrv[history$county_desc == "ROWAN"] <- 13
history$cong_dist_abbrv[history$county_desc == "JOHNSTON"] <- 7
history$cong_dist_abbrv[history$county_desc == "COLUMBUS"] <- 7
history$cong_dist_abbrv[history$county_desc == "BLADEN"] <- 7
history$cong_dist_abbrv[history$county_desc == "DURHAM"] <- 4
history$cong_dist_abbrv[history$county_desc == "CARTERET"] <- 3
history$cong_dist_abbrv[history$county_desc == "CHATHAM"] <- 4
history$cong_dist_abbrv[history$county_desc == "RANDOLPH"] <- 6
history$cong_dist_abbrv[history$county_desc == "GUILFORD"] <- 6
history$cong_dist_abbrv[history$county_desc == "CRAVEN"] <- 3
history$cong_dist_abbrv[history$county_desc == "DUPLIN"] <- 3
history$cong_dist_abbrv[history$county_desc == "GRANVILLE"] <- 4
history$cong_dist_abbrv[history$county_desc == "HALIFAX"] <- 1
history$cong_dist_abbrv[history$county_desc == "NORTHAMPTON"] <- 1
history$cong_dist_abbrv[history$county_desc == "MONTGOMERY"] <- 8
history$cong_dist_abbrv[history$county_desc == "ONSLOW"] <- 3
history$cong_dist_abbrv[history$county_desc == "ORANGE"] <- 4
history$cong_dist_abbrv[history$county_desc == "PAMLICO"] <- 3
history$cong_dist_abbrv[history$county_desc == "PENDER"] <- 7
history$cong_dist_abbrv[history$county_desc == "PERQUIMANS"] <- 3
history$cong_dist_abbrv[history$county_desc == "PITT"] <- 1
history$cong_dist_abbrv[history$county_desc == "RUTHERFORD"] <- 11
history$cong_dist_abbrv[history$county_desc == "STANLY"] <- 8
history$cong_dist_abbrv[history$county_desc == "YADKIN"] <- 10
history$cong_dist_abbrv[history$county_desc == "ANSON"] <- 9
history$cong_dist_abbrv[history$county_desc == "BEAUFORT"] <- 3
history$cong_dist_abbrv[history$county_desc == "BERTIE"] <- 1
history$cong_dist_abbrv[history$county_desc == "BRUNSWICK"] <- 7
history$cong_dist_abbrv[history$county_desc == "CAMDEN"] <- 11
history$cong_dist_abbrv[history$county_desc == "AVERY"] <- 5
history$cong_dist_abbrv[history$county_desc == "CASWELL"] <- 13
history$cong_dist_abbrv[history$county_desc == "CATAWBA"] <- 10
history$cong_dist_abbrv[history$county_desc == "CHEROKEE"] <- 11
noncompetitive <- c(1,4,5,6,10,12)
district <- c()
for(i in 1:length(noncompetitive))
{
dist_num <- noncompetitive[i]
dist_data <- history %>% filter(cong_dist_abbrv == dist_num)
num_DEM <- nrow(dist_data %>% filter(voted_party_cd == "DEM"))
num_REP <- nrow(dist_data %>% filter(voted_party_cd == "REP"))
REP_pct <- num_REP / (num_REP + num_DEM)
district[i] <- REP_pct * 100
}
district <- c(26.83741, 22.78081, 68.55712, 45.72268, 70.02141, 36.26725)
house <- read_csv("house_polls.csv")
house <- house %>% filter(state == "North Carolina")
house$days_to_election = as.double(as.Date(house$election_date, "%m/%d/%Y") - as.Date(house$end_date, "%m/%d/%Y"))
house <- house %>% filter(candidate_party %in% c("DEM","REP"))
house$y = ifelse(house$candidate_party == "REP", house$pct, 100-house$pct) # support ratio for rep
days <- max(house$days_to_election)
total_day <- NULL
total_pct <- NULL
total_cong <- NULL
for(i in 1:length(district))
{
seq_day <- seq(as.double(days), 1, -1)
seq_pct <- rep(district[i], length(seq_day))
seq_cong <- rep(paste("district", noncompetitive[i]),length(seq_day))
total_seq <- rbind(total_day, as.matrix(seq_day))
total_pct <- rbind(total_pct, as.matrix(seq_pct))
total_cong <- rbind(total_cong, as.matrix(seq_cong))
}
append_house <- data.frame(total_seq, total_pct, total_cong)
names(append_house) <- c("days_to_election", "pct", "seat_name")
house <- dplyr::bind_rows(house, append_house)
cong_dist <- house$seat_name %>% unique
house$y = ifelse( is.na(house$y), house$pct, house$y) # support ratio for rep
house$r <- match(house$seat_name, cong_dist)
house$t <- house$days_to_election + 1 #WHY PLUS ONE?
house_y<- house$y
house_r<- house$r
house_t<- house$t
N_polls <- house_y %>% length
N_states <- cong_dist %>% length
N_days <- house_t %>% max
model_house <- function(){
for(k in 1:N_polls)
{
y[k] ~ dnorm(p[k],1/sigma2_y[r[k]]) #note no longer binomial
p[k] = theta[r[k],t[k]]
}
for(j in 2:N_days)
{
theta[1:N_states,j] ~ dmnorm(theta[1:N_states,j-1],Phi)
}
Phi ~ dwish(I_states,N_states+1) #fill in wishart parameters, google JAGS wishart distribution should turn it up
Sigma = inverse(Phi)
#which, Phi or Sigma is the covariance and which is the precision?
#optional: theta[1:N_states,1] ~ dmnorm(mu0,s0) #define mu0 and s0 in your jags_data object
#Use your hierarhciacl prior for sigma2_y from before
for(j in 1:N_states){
sigma2_y[j] = 1/sigma2_y_inv[j]
sigma2_y_inv[j] ~ dgamma(nu_y,nu_y*tau_y)
theta[j,1] ~ dnorm(mu0,pow(sigma2_0,-1))
}
nu_y ~ dunif(0,100)
tau_y ~ dunif(0,100)
nu_beta ~ dunif(0,100)
tau_beta ~ dunif(0,100)
mu0 ~ dnorm(50,pow(7.5,-2))
sigma2_0 = 1/sigma2_0_inv
sigma2_0_inv ~ dgamma(.5,.5)
}
house_jags_data <- list(y=house_y,t=house_t,r=house_r,
N_polls=N_polls,N_states=N_states,N_days=N_days)
house_jags_data$I_states <- diag(N_states)
#be sure to add your added parameters to parameters.to.save
jags_sims_house <- jags(data = house_jags_data,
model.file = model_house,
parameters.to.save = c("theta","Sigma","p","sigma2_y"),
n.iter = 100)
house_sims <- jags_sims_house$BUGSoutput$sims.list$theta[,,1]
colnames(house_sims) <- cong_dist
house_sims %>% {.>50} %>% colMeans()
swing_state_traj #plot swing state DEM party
president_var #plot president variance
swing_state_prob #kable swing state probility of biden win
ec_dis #plot electorial college vote distribution
ec_interval #kable of ec vote CI
swing_state_win_prob # Kable Swing State winning probability
swing_state_share_interval # Kable Swing State share interval
senator_trend # plot senator trend for 47 states
senator_poll_plot_data <- tibble(y=senator_jags_data$y,
t=senator_jags_data$t %>% as.integer(),
state = states[senator_jags_data$r])
senator_beta_plot_data <- lapply(1:N_states,function(st){
sims <- jags_sims_senator$BUGSoutput$sims.list$theta[,st,]
data.frame(state = states[st],
t=1:N_days,mean=colMeans(sims),
lb=apply(sims,2,quantile,probs=.025),
ub=apply(sims,2,quantile,probs=.975))}) %>%
bind_rows()
swing_state_traj #plot swing state DEM party
president_var #plot president variance
swing_state_prob #kable swing state probility of biden win
ec_dis #plot electorial college vote distribution
ec_interval #kable of ec vote CI
swing_state_win_prob # Kable Swing State winning probability
swing_state_share_interval # Kable Swing State share interval
# senator_trend # plot senator trend for 47 states
# senator_var # plot senator variance for 47 states
senator_all_state_prob # kable all state senate winning probability
swing_state_share_interval # kable all state senate vote share interval
nc_senate_share_qt # Kable Tom Tillis share pt
nc_senate_share # plot Tom Tillis Share
tom_win_prob # Tom Win Prob
rep_senate_prob # probability REP controls senate
senate_dis # plot total REP senators
swing_state_traj #plot swing state DEM party
president_var #plot president variance
swing_state_prob #kable swing state probility of biden win
ec_dis #plot electorial college vote distribution
ec_interval #kable of ec vote CI
swing_state_win_prob # Kable Swing State winning probability
swing_state_share_interval # Kable Swing State share interval
# senator_trend # plot senator trend for 47 states
# senator_var # plot senator variance for 47 states
senator_all_state_prob # kable all state senate winning probability
swing_state_share_interval # kable all state senate vote share interval
nc_senate_share_qt # Kable Tom Tillis share pt
nc_senate_share # plot Tom Tillis Share
tom_win_prob # Tom Win Prob
rep_senate_prob # probability REP controls senate
senate_dis # plot total REP senators
senator_trend # plot senator trend for 47 states
senator_var # plot senator variance for 47 states
senator_trend # plot senator trend for 47 states
swing_state_win_prob
ec_votes
mean({ec_votes > 270})
mean({ec_votes < 270})
mean({ec_votes > 270})
house_sims <- jags_sims_house$BUGSoutput$sims.list$theta[,,1]
colnames(house_sims) <- cong_dist
house_sims %>% {.>50} %>% colMeans()
house_sims <- jags_sims_house$BUGSoutput$sims.list$theta[,,1]
colnames(house_sims) <- cong_dist
house_all_cong_dist_prob <- as.data.frame(house_sims %>% {.>50} %>% colMeans())
names(house_all_cong_dist_prob) <- "Winning Probability"
house_all_cong_dist_prob <- kable(house_all_cong_dist_prob, caption = "House All Congressional District Winning Probability")
house_all_con_dist_share_interval <- kable(colQuantiles(house_sims, probs=c(0.025, 0.5, 0.975)), caption = "house All State Vote Share Percentage Interval Estimate")
house_sims <- jags_sims_house$BUGSoutput$sims.list$theta[,,1]
colnames(house_sims) <- cong_dist
house_all_cong_dist_prob <- as.data.frame(house_sims %>% {.>50} %>% colMeans())
names(house_all_cong_dist_prob) <- "Winning Probability"
house_all_cong_dist_prob <- kable(house_all_cong_dist_prob, caption = "House All Congressional District Winning Probability")
house_all_con_dist_share_interval <- kable(colQuantiles(house_sims, probs=c(0.025, 0.5, 0.975)), caption = "house All State Vote Share Percentage Interval Estimate")
house_all_cong_dist_prob
house_all_con_dist_share_interval
sort(house_all_cong_dist_prob)
house_all_cong_dist_prob[match(target, house_all_cong_dist_prob),]
target <- c("district 1",
"district 2",
"district 3",
"district 4",
"district 5",
"district 6",
"district 7",
"district 8",
"district 9",
"district 10",
"district 11",
"district 12",
"district 13")
house_all_cong_dist_prob[match(target, house_all_cong_dist_prob),]
house_all_cong_dist_prob
house_sims <- jags_sims_house$BUGSoutput$sims.list$theta[,,1]
colnames(house_sims) <- cong_dist
house_all_cong_dist_prob <- as.data.frame(house_sims %>% {.>50} %>% colMeans())
target <- c("district 1",
"district 2",
"district 3",
"district 4",
"district 5",
"district 6",
"district 7",
"district 8",
"district 9",
"district 10",
"district 11",
"district 12",
"district 13")
match(house_all_cong_dist_prob, target)
house_all_cong_dist_prob
house_sims <- jags_sims_house$BUGSoutput$sims.list$theta[,,1]
colnames(house_sims) <- cong_dist
house_all_cong_dist_prob <- as.data.frame(house_sims %>% {.>50} %>% colMeans())
# target <- c("district 1",
#             "district 2",
#             "district 3",
#             "district 4",
#             "district 5",
#             "district 6",
#             "district 7",
#             "district 8",
#             "district 9",
#             "district 10",
#             "district 11",
#             "district 12",
#             "district 13")
names(house_all_cong_dist_prob) <- "Winning Probability"
house_all_cong_dist_prob <- kable(sort(house_all_cong_dist_prob), caption = "House All Congressional District Winning Probability (REP)")
house_all_cong_dist_prob <- sort(house_all_cong_dist_prob)
house_all_cong_dist_prob
house_sims <- jags_sims_house$BUGSoutput$sims.list$theta[,,1]
colnames(house_sims) <- cong_dist
house_all_cong_dist_prob <- as.data.frame(house_sims %>% {.>50} %>% colMeans())
# target <- c("district 1",
#             "district 2",
#             "district 3",
#             "district 4",
#             "district 5",
#             "district 6",
#             "district 7",
#             "district 8",
#             "district 9",
#             "district 10",
#             "district 11",
#             "district 12",
#             "district 13")
names(house_all_cong_dist_prob) <- "Winning Probability"
house_all_cong_dist_prob <- kable(house_all_cong_dist_prob, caption = "House All Congressional District Winning Probability (REP)")
house_all_cong_dist_share_interval <- kable(colQuantiles(house_sims, probs=c(0.025, 0.5, 0.975)), caption = "house All State Vote Share Percentage Interval Estimate (REP)")
house_all_cong_dist_prob <- sort(house_all_cong_dist_prob)
house_all_cong_dist_share_interval <- sort(house_all_cong_dist_share_interval)
#house_all_cong_dist_prob[match(target, house_all_cong_dist_prob),]
house_all_cong_dist_prob
house_sims <- jags_sims_house$BUGSoutput$sims.list$theta[,,1]
colnames(house_sims) <- cong_dist
house_all_cong_dist_prob <- as.data.frame(house_sims %>% {.>50} %>% colMeans())
# target <- c("district 1",
#             "district 2",
#             "district 3",
#             "district 4",
#             "district 5",
#             "district 6",
#             "district 7",
#             "district 8",
#             "district 9",
#             "district 10",
#             "district 11",
#             "district 12",
#             "district 13")
names(house_all_cong_dist_prob) <- "Winning Probability"
house_all_cong_dist_prob <- kable(house_all_cong_dist_prob, caption = "House All Congressional District Winning Probability (REP)")
house_all_cong_dist_share_interval <- kable(colQuantiles(house_sims, probs=c(0.025, 0.5, 0.975)), caption = "house All State Vote Share Percentage Interval Estimate (REP)")
house_all_cong_dist_prob <- kable(sort(house_all_cong_dist_prob))
house_all_cong_dist_share_interval <- kable(sort(house_all_cong_dist_share_interval))
#house_all_cong_dist_prob[match(target, house_all_cong_dist_prob),]
#house_all_cong_dist_prob[match(target, house_all_cong_dist_prob),]
house_all_cong_dist_prob
house_sims <- jags_sims_house$BUGSoutput$sims.list$theta[,,1]
colnames(house_sims) <- cong_dist
house_all_cong_dist_prob <- as.data.frame(house_sims %>% {.>50} %>% colMeans())
# target <- c("district 1",
#             "district 2",
#             "district 3",
#             "district 4",
#             "district 5",
#             "district 6",
#             "district 7",
#             "district 8",
#             "district 9",
#             "district 10",
#             "district 11",
#             "district 12",
#             "district 13")
names(house_all_cong_dist_prob) <- "Winning Probability"
house_all_cong_dist_prob <- kable(house_all_cong_dist_prob, caption = "House All Congressional District Winning Probability (REP)")
house_all_cong_dist_share_interval <- kable(colQuantiles(house_sims, probs=c(0.025, 0.5, 0.975)), caption = "house All State Vote Share Percentage Interval Estimate (REP)")
