history$cong_dist_abbrv[history$county_desc == "GRANVILLE"] <- 4
history$cong_dist_abbrv[history$county_desc == "HALIFAX"] <- 1
history$cong_dist_abbrv[history$county_desc == "NORTHAMPTON"] <- 1
history$cong_dist_abbrv[history$county_desc == "MONTGOMERY"] <- 8
history$cong_dist_abbrv[history$county_desc == "ONSLOW"] <- 3
history$cong_dist_abbrv[history$county_desc == "ORANGE"] <- 4
history$cong_dist_abbrv[history$county_desc == "PAMLICO"] <- 3
history$cong_dist_abbrv[history$county_desc == "PENDER"] <- 7
history$cong_dist_abbrv[history$county_desc == "PERQUIMANS"] <- 3
history$cong_dist_abbrv[history$county_desc == "PITT"] <- 1
history$cong_dist_abbrv[history$county_desc == "RUTHERFORD"] <- 11
history$cong_dist_abbrv[history$county_desc == "STANLY"] <- 8
history$cong_dist_abbrv[history$county_desc == "YADKIN"] <- 10
history$cong_dist_abbrv[history$county_desc == "ANSON"] <- 9
history$cong_dist_abbrv[history$county_desc == "BEAUFORT"] <- 3
history$cong_dist_abbrv[history$county_desc == "BERTIE"] <- 1
history$cong_dist_abbrv[history$county_desc == "BRUNSWICK"] <- 7
history$cong_dist_abbrv[history$county_desc == "CAMDEN"] <- 11
history$cong_dist_abbrv[history$county_desc == "AVERY"] <- 5
history$cong_dist_abbrv[history$county_desc == "CASWELL"] <- 13
history$cong_dist_abbrv[history$county_desc == "CATAWBA"] <- 10
history$cong_dist_abbrv[history$county_desc == "CHEROKEE"] <- 11
noncompetitive <- c(1,4,5,6,10,12)
district <- c()
for(i in 1:length(noncompetitive))
{
dist_num <- noncompetitive[i]
dist_data <- history %>% filter(cong_dist_abbrv == dist_num)
num_DEM <- nrow(dist_data %>% filter(voted_party_cd == "DEM"))
num_REP <- nrow(dist_data %>% filter(voted_party_cd == "REP"))
REP_pct <- num_REP / (num_REP + num_DEM)
district[i] <- REP_pct * 100
}
district <- c(26.83741, 22.78081, 68.55712, 45.72268, 70.02141, 36.26725)
house <- read_csv("house_polls.csv")
house <- house %>% filter(state == "North Carolina")
house$days_to_election = as.double(as.Date(house$election_date, "%m/%d/%Y") - as.Date(house$end_date, "%m/%d/%Y"))
house <- house %>% filter(candidate_party %in% c("DEM","REP"))
house$y = ifelse(house$candidate_party == "REP", house$pct, 100-house$pct) # support ratio for rep
days <- max(house$days_to_election)
total_day <- NULL
total_pct <- NULL
total_cong <- NULL
for(i in 1:length(district))
{
seq_day <- seq(as.double(days), 1, -1)
seq_pct <- rep(district[i], length(seq_day))
seq_cong <- rep(paste("district", noncompetitive[i]),length(seq_day))
total_seq <- rbind(total_day, as.matrix(seq_day))
total_pct <- rbind(total_pct, as.matrix(seq_pct))
total_cong <- rbind(total_cong, as.matrix(seq_cong))
}
append_house <- data.frame(total_seq, total_pct, total_cong)
names(append_house) <- c("days_to_election", "pct", "seat_name")
house <- dplyr::bind_rows(house, append_house)
cong_dist <- house$seat_name %>% unique
house$y = ifelse( is.na(house$y), house$pct, house$y) # support ratio for rep
house$r <- match(house$seat_name, cong_dist)
house$t <- house$days_to_election + 1 #WHY PLUS ONE?
house_y<- house$y
house_r<- house$r
house_t<- house$t
N_polls <- house_y %>% length
N_states <- cong_dist %>% length
N_days <- house_t %>% max
model_house <- function(){
for(k in 1:N_polls)
{
y[k] ~ dnorm(p[k],1/sigma2_y[r[k]]) #note no longer binomial
p[k] = theta[r[k],t[k]]
}
for(j in 2:N_days)
{
theta[1:N_states,j] ~ dmnorm(theta[1:N_states,j-1],Phi)
}
Phi ~ dwish(I_states,N_states+1) #fill in wishart parameters, google JAGS wishart distribution should turn it up
Sigma = inverse(Phi)
#which, Phi or Sigma is the covariance and which is the precision?
#optional: theta[1:N_states,1] ~ dmnorm(mu0,s0) #define mu0 and s0 in your jags_data object
#Use your hierarhciacl prior for sigma2_y from before
for(j in 1:N_states){
sigma2_y[j] = 1/sigma2_y_inv[j]
sigma2_y_inv[j] ~ dgamma(nu_y,nu_y*tau_y)
theta[j,1] ~ dnorm(mu0,pow(sigma2_0,-1))
}
nu_y ~ dunif(0,100)
tau_y ~ dunif(0,100)
nu_beta ~ dunif(0,100)
tau_beta ~ dunif(0,100)
mu0 ~ dnorm(50,pow(7.5,-2))
sigma2_0 = 1/sigma2_0_inv
sigma2_0_inv ~ dgamma(.5,.5)
}
house_jags_data <- list(y=house_y,t=house_t,r=house_r,
N_polls=N_polls,N_states=N_states,N_days=N_days)
house_jags_data$I_states <- diag(N_states)
#be sure to add your added parameters to parameters.to.save
jags_sims_house <- jags(data = house_jags_data,
model.file = model_house,
parameters.to.save = c("theta","Sigma","p","sigma2_y"),
n.iter = 100)
house_sims <- jags_sims_house$BUGSoutput$sims.list$theta[,,1]
colnames(house_sims) <- cong_dist
house_all_cong_dist_prob <- as.data.frame(house_sims %>% {.>50} %>% colMeans())
# target <- c("district 1",
#             "district 2",
#             "district 3",
#             "district 4",
#             "district 5",
#             "district 6",
#             "district 7",
#             "district 8",
#             "district 9",
#             "district 10",
#             "district 11",
#             "district 12",
#             "district 13")
names(house_all_cong_dist_prob) <- "Winning Probability"
house_all_cong_dist_prob <- kable(house_all_cong_dist_prob, caption = "House All Congressional District Winning Probability (REP)")
house_all_cong_dist_share_interval <- kable(colQuantiles(house_sims, probs=c(0.025, 0.5, 0.975)), caption = "house All State Vote Share Percentage Interval Estimate (REP)")
swing_state_traj #plot swing state DEM party
president_var #plot president variance
swing_state_prob #kable swing state probility of biden win
ec_dis #plot electorial college vote distribution
ec_interval #kable of ec vote CI
swing_state_win_prob # Kable Swing State winning probability
swing_state_share_interval_president # Kable Swing State share interval president
senator_trend # plot senator trend for 47 states
senator_var # plot senator variance for 47 states
senator_all_state_prob # kable all state senate winning probability
swing_state_share_interval # kable all state senate vote share interval
nc_senate_share_qt # Kable Tom Tillis share pt
nc_senate_share # plot Tom Tillis Share
tom_win_prob # Tom Win Prob
rep_senate_prob # probability REP controls senate
senate_dis # plot total REP senators
house_all_cong_dist_prob # Kable congressional district REP winning probability
house_all_cong_dist_share_interval # Kable congressional district REP share pct interval
swing_state_share_interval_president
house_method <- ggplot(house_polls, mapping = aes(x=methodology)) +
geom_bar() +
labs(title = "Poll Methodology Distribution", subtitle = "House Polls",
x = "Method Type") +
theme(axis.text.x = element_text(angle = 90))
# house_method
senate_method <- ggplot(senate_polls, mapping = aes(x=methodology)) +
geom_bar() +
labs(title = "Poll Methodology Distribution", subtitle = "Senate Polls",
x = "Method Type") +
theme(axis.text.x = element_text(angle = 90))
# senate_method
presidential_method <-ggplot(president_polls_2020, mapping = aes(x=mode)) +
geom_bar() +
labs(title = "Poll Methodology Distribution", subtitle = "Presidential Polls",
x = "Method Type") +
theme(axis.text.x = element_text(angle = 90))
# presidential_method
grid.arrange(house_method, senate_method, presidential_method, ncol=1)
grid.arrange(house_method, senate_method, presidential_method, ncol=3)
house_method <- ggplot(house_polls, mapping = aes(x=methodology)) +
geom_bar() +
labs(title = "Poll Methodology Distribution", subtitle = "House Polls",
x = "Method Type") +
theme(axis.text.x = element_text(angle = 90))
# house_method
senate_method <- ggplot(senate_polls, mapping = aes(x=methodology)) +
geom_bar() +
labs(title = "Poll Methodology Distribution", subtitle = "Senate Polls",
x = "Method Type") +
theme(axis.text.x = element_text(angle = 90))
# senate_method
presidential_method <-ggplot(president_polls_2020, mapping = aes(x=mode)) +
geom_bar() +
labs(title = "Poll Methodology Distribution", subtitle = "Presidential Polls",
x = "Method Type") +
theme(axis.text.x = element_text(angle = 90))
# presidential_method
grid.arrange(house_method, senate_method, presidential_method, ncol=3)
house_method <- ggplot(house_polls, mapping = aes(x=methodology)) +
geom_bar() +
labs(title = "Poll Methodology Distribution", subtitle = "House Polls",
x = "Method Type") +
theme(axis.text.x = element_text(angle = 90))
# house_method
senate_method <- ggplot(senate_polls, mapping = aes(x=methodology)) +
geom_bar() +
labs(title = "Poll Methodology Distribution", subtitle = "Senate Polls",
x = "Method Type") +
theme(axis.text.x = element_text(angle = 90))
# senate_method
presidential_method <-ggplot(president_polls_2020, mapping = aes(x=mode)) +
geom_bar() +
labs(title = "Poll Methodology Distribution", subtitle = "Presidential Polls",
x = "Method Type") +
theme(axis.text.x = element_text(angle = 90))
# presidential_method
grid.arrange(house_method, senate_method, presidential_method, ncol=3)
house_state <-ggplot(house_polls, mapping = aes(x=state)) +
geom_bar() +
labs(title = "Poll State Distribution", subtitle = "House Polls",
x = "State") +
theme(axis.text.x = element_text(angle = 45))
# house_state
senate_state <-ggplot(house_polls, mapping = aes(x=state)) +
geom_bar() +
labs(title = "Poll State Distribution", subtitle = "Senate Polls",
x = "State") +
theme(axis.text.x = element_text(angle = 45))
# senate_state
presidential_state <-ggplot(president_polls_2020, mapping = aes(x=state)) +
geom_bar() +
labs(title = "Poll State Distribution", subtitle = "Presidential Polls",
x = "State") +
theme(axis.text.x = element_text(angle = 45))
# presidential_state
grid.arrange(house_state, senate_state, presidential_state, ncol=3)
house_state <-ggplot(house_polls, mapping = aes(x=state)) +
geom_bar() +
labs(title = "Poll State Distribution", subtitle = "House Polls",
x = "State") +
theme(axis.text.x = element_text(angle = 90))
# house_state
senate_state <-ggplot(house_polls, mapping = aes(x=state)) +
geom_bar() +
labs(title = "Poll State Distribution", subtitle = "Senate Polls",
x = "State") +
theme(axis.text.x = element_text(angle = 90))
# senate_state
presidential_state <-ggplot(president_polls_2020, mapping = aes(x=state)) +
geom_bar() +
labs(title = "Poll State Distribution", subtitle = "Presidential Polls",
x = "State") +
theme(axis.text.x = element_text(angle = 90))
# presidential_state
grid.arrange(house_state, senate_state, presidential_state, ncol=3)
house_state <-ggplot(house_polls, mapping = aes(x=state)) +
geom_bar() +
labs(title = "Poll State Distribution", subtitle = "House Polls",
x = "State") +
theme(axis.text.x = element_text(angle = 90))
# house_state
senate_state <-ggplot(house_polls, mapping = aes(x=state)) +
geom_bar() +
labs(title = "Poll State Distribution", subtitle = "Senate Polls",
x = "State") +
theme(axis.text.x = element_text(angle = 90))
# senate_state
presidential_state <-ggplot(president_polls_2020, mapping = aes(x=state)) +
geom_bar() +
labs(title = "Poll State Distribution", subtitle = "Presidential Polls",
x = "State") +
theme(axis.text.x = element_text(angle = 90))
# presidential_state
grid.arrange(house_state, senate_state, presidential_state, ncol=3)
house_candidate <-ggplot(house_polls, mapping = aes(x=candidate_party)) +
geom_bar() +
labs(title = "Poll Candidate Party Distribution", subtitle = "House Polls",
x = "Party Affiliation") +
theme(axis.text.x = element_text(angle = 45))
senate_candidate <-ggplot(senate_polls, mapping = aes(x=candidate_party)) +
geom_bar() +
labs(title = "Poll Candidate Party Distribution", subtitle = "Senate Polls",
x = "Party Affiliation") +
theme(axis.text.x = element_text(angle = 45))
grid.arrange(house_candidate, senate_candidate, ncol=2)
house_candidate <-ggplot(house_polls, mapping = aes(x=candidate_party)) +
geom_bar() +
labs(title = "Poll Candidate Party Distribution", subtitle = "House Polls",
x = "Party Affiliation") +
theme(axis.text.x = element_text(angle = 45))
senate_candidate <-ggplot(senate_polls, mapping = aes(x=candidate_party)) +
geom_bar() +
labs(title = "Poll Candidate Party Distribution", subtitle = "Senate Polls",
x = "Party Affiliation") +
theme(axis.text.x = element_text(angle = 45))
grid.arrange(house_candidate, senate_candidate, ncol=2)
traceplot(jags_sims_mv)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.width = 7, fig.height = 5)
options(digits = 4)
library(tidyverse)
library(R2jags)
library(ggplot2)
library(knitr)
library(matrixStats)
library(gridExtra)
president_polls_2020 <- read_csv("2020 US presidential election polls - all_polls.csv") %>%
mutate(days_to_election = as.Date("2020/11/03","%Y/%m/%d" ) - as.Date(end.date, "%m/%d/%Y"),
state = ifelse(state == "--","Overall",state),
y = biden/(biden + trump)*100)
house_polls <- read_csv("house_polls.csv")
senate_polls <- read_csv("senate_polls.csv")
ncvhis_Statewide_small <- read_rds("ncvhis_Statewide_small.rds")
house_method <- ggplot(house_polls, mapping = aes(x=methodology)) +
geom_bar() +
labs(title = "Poll Methodology Distribution", subtitle = "House Polls",
x = "Method Type") +
theme(axis.text.x = element_text(angle = 90))
# house_method
senate_method <- ggplot(senate_polls, mapping = aes(x=methodology)) +
geom_bar() +
labs(title = "Poll Methodology Distribution", subtitle = "Senate Polls",
x = "Method Type") +
theme(axis.text.x = element_text(angle = 90))
# senate_method
presidential_method <-ggplot(president_polls_2020, mapping = aes(x=mode)) +
geom_bar() +
labs(title = "Poll Methodology Distribution", subtitle = "Presidential Polls",
x = "Method Type") +
theme(axis.text.x = element_text(angle = 90))
# presidential_method
grid.arrange(house_method, senate_method, presidential_method, ncol=3)
house_state <-ggplot(house_polls, mapping = aes(x=state)) +
geom_bar() +
labs(title = "Poll State Distribution", subtitle = "House Polls",
x = "State") +
theme(axis.text.x = element_text(angle = 90))
# house_state
senate_state <-ggplot(house_polls, mapping = aes(x=state)) +
geom_bar() +
labs(title = "Poll State Distribution", subtitle = "Senate Polls",
x = "State") +
theme(axis.text.x = element_text(angle = 90))
# senate_state
presidential_state <-ggplot(president_polls_2020, mapping = aes(x=state)) +
geom_bar() +
labs(title = "Poll State Distribution", subtitle = "Presidential Polls",
x = "State") +
theme(axis.text.x = element_text(angle = 90))
# presidential_state
grid.arrange(house_state, senate_state, presidential_state, ncol=3)
house_candidate <-ggplot(house_polls, mapping = aes(x=candidate_party)) +
geom_bar() +
labs(title = "Poll Candidate Party Distribution", subtitle = "House Polls",
x = "Party Affiliation") +
theme(axis.text.x = element_text(angle = 45))
senate_candidate <-ggplot(senate_polls, mapping = aes(x=candidate_party)) +
geom_bar() +
labs(title = "Poll Candidate Party Distribution", subtitle = "Senate Polls",
x = "Party Affiliation") +
theme(axis.text.x = element_text(angle = 45))
grid.arrange(house_candidate, senate_candidate, ncol=2)
biden_margin <-ggplot(president_polls_2020, mapping = aes(x=biden_margin)) +
geom_bar() +
labs(title = "Biden Margin", x = "Range")
biden_margin
president_polls_2020 <- subset(president_polls_2020, days_to_election < 200)
president_polls_2020 <- president_polls_2020 %>%
filter(days_to_election <= 200, state %in% c("FL","GA","IA","NC","OH","TX","AZ","MI","MN","NV","NH","PA","WI"))
states <- president_polls_2020$state %>% unique
y <- president_polls_2020$y
r <- match(president_polls_2020$state,states)
t <- president_polls_2020$days_to_election + 1 #WHY PLUS ONE?
N_polls <- y %>% length
N_states <- states %>% length
N_days <- t %>% max
jags_data <- list(y=y,t=t,r=r,
N_polls=N_polls,N_states=N_states,N_days=N_days)
model_mv <- function(){
for(k in 1:N_polls){
y[k] ~ dnorm(p[k],1/sigma2_y[r[k]]) #note no longer binomial
p[k] = theta[r[k],t[k]]
}
for(j in 2:N_days){
theta[1:N_states,j] ~ dmnorm(theta[1:N_states,j-1],Phi)
}
Phi ~ dwish(I_states,N_states+1) #fill in wishart parameters, google JAGS wishart distribution should turn it up
Sigma = inverse(Phi)
#which, Phi or Sigma is the covariance and which is the precision?
#optional: theta[1:N_states,1] ~ dmnorm(mu0,s0) #define mu0 and s0 in your jags_data object
#Use your hierarchical prior for sigma2_y from before
for(j in 1:N_states){
sigma2_y[j] = 1/sigma2_y_inv[j]
sigma2_y_inv[j] ~ dgamma(nu_y,nu_y*tau_y)
theta[j,1] ~ dnorm(mu0,pow(sigma2_0,-1))
}
nu_y ~ dunif(0,100)
tau_y ~ dunif(0,100)
nu_beta ~ dunif(0,100)
tau_beta ~ dunif(0,100)
mu0 ~ dnorm(50,pow(7.5,-2))
sigma2_0 = 1/sigma2_0_inv
sigma2_0_inv ~ dgamma(.5,.5)
}
jags_data <- list(y=y,t=t,r=r,
N_polls=N_polls,N_states=N_states,N_days=N_days)
jags_data$I_states <- diag(N_states)
#be sure to add your added parameters to parameters.to.save
jags_sims_mv <- jags(data = jags_data,model.file = model_mv,parameters.to.save = c("theta","Sigma",
"p","sigma2_y"),
n.iter = 100)
library(coda)
samples_president <- coda.samples(jags, c('a', 'b'), 10)
samples_president <- coda.samples(jags_sims_mv, c('theta', 'p'), 10)
samples_president <- coda.samples(jags_sims_mv, c('theta', 'p'), 10)
samples_president <- coda.samples(jags_sims_mv, c('theta', 'p'), 100)
# samples_president <- coda.samples(jags_sims_mv, c('theta', 'p'), 100)
Bayesian_leaders_first_approach
# samples_president <- coda.samples(jags_sims_mv, c('theta', 'p'), 100)
jags_sims_mv
# samples_president <- coda.samples(jags_sims_mv, c('theta', 'p'), 100)
# jags_sims_mv
# samples_president <- coda.samples(jags_sims_mv, c('theta', 'p'), 100)
jags_sims_mv$BUGSoutput$
# samples_president <- coda.samples(jags_sims_mv, c('theta', 'p'), 100)
jags_sims_mv$BUGSoutput
jags_sims_mv$BUGSoutput
library(coda)
# samples_president <- coda.samples(jags_sims_mv, c('theta', 'p'), 100)
jags_sims_mv$BUGSoutput
library(coda)
# samples_president <- coda.samples(jags_sims_mv, c('theta', 'p'), 100)
jags_sims_mv$BUGSoutput
jags_sims_mv$BUGSoutput$sims.array
attributes(jags_sims_mv)
jags_sims_mv$DIC
attributes(jags_sims_mv)
jags_sims_mv$BUGSoutput
attributes(jags_sims_mv$BUGSoutput)
jags_sims_mv$BUGSoutput$summary
jags_sims_mv$BUGSoutput$summary$Rhat
attributes(jags_sims_mv$BUGSoutput$summary)
jags_sims_mv$BUGSoutput$summary$dimnames[[2]]
attributes(jags_sims_mv$BUGSoutput$summary)
jags_sims_mv$BUGSoutput$summary$dimnames
dimnames(jags_sims_mv$BUGSoutput$summary)
dimnames(jags_sims_mv$BUGSoutput$summary)[[2]]
attributes(jags_sims_mv$BUGSoutput$summary)
jags_sims_mv$BUGSoutput$summary
library(coda)
# samples_president <- coda.samples(jags_sims_mv, c('theta', 'p'), 100)
dimnames(jags_sims_mv$BUGSoutput$summary)[[2]]
jags_sims_mv$BUGSoutput$summary
as.data.frame(jags_sims_mv$BUGSoutput$summary)
as.data.frame(jags_sims_mv$BUGSoutput$summary)$Rhat
jags_sims_mv
traceplot(jags_sims_mv, c("theta"))
traceplot(jags_sims_mv, c("p"))
traceplot(jags_sims_mv, c(p))
traceplot(jags_sims_mv, c("theta", "p", "beta"))
library(mcmcr)
library(FedData)
pkg_test("mcmcr")
Result_MCMC_president <- as.mcmc(jags_sims_mv)
Result_data_president <- data.frame(as.matrix(Result_MCMC_president))
Result_data_president
traceplot(Result_data_president$p.712.)
plot(Result_data_president$p.712.)
ggplot(data=Result_data_president$p.712.) +
geom_line()
ggplot(data=Result_data_president., aes(x=, y=p.712.)) +
geom_line()
ggplot(data=Result_data_president, aes(x=, y=p.712.)) +
geom_line()
ggplot(data=Result_data_president, aes(p.712.)) +
geom_line()
ggplot(data=Result_data_president, aes(y=p.712.)) +
geom_line()
plot(Result_data_president$p.712.)
Result_data_president
dim(Result_data_president)
Result_data_president$index <- seq(1, dim(Result_data_president))
Result_data_president$index <- seq(1, dim(Result_data_president)[1])
ggplot(data=Result_data_president, aes(x = index, y=p.712.)) +
geom_line()
ggplot(data=Result_data_president) +
geom_line(aes(x = index, y=p.712.)) +
geom_line(aes(x = index, y=p.612.)) +
geom_line(aes(x = index, y=p.512.)) +
ggplot(data=Result_data_president) +
geom_line(aes(x = index, y=p.712.)) +
geom_line(aes(x = index, y=p.612.)) +
geom_line(aes(x = index, y=p.512.)) +
ggplot(data=Result_data_president) +
geom_line(aes(x = index, y=p.712.)) +
geom_line(aes(x = index, y=p.612.)) +
geom_line(aes(x = index, y=p.512.))
ggplot(data=Result_data_president) +
geom_line(aes(x = index, y=p.712.)) +
geom_line(aes(x = index, y=p.612.)) +
geom_line(aes(x = index, y=p.512.))
ggplot(data=Result_data_president) +
geom_line(aes(x = index, y=p.712.), color="blue") +
geom_line(aes(x = index, y=p.612.), color="green") +
geom_line(aes(x = index, y=p.512.), color="red")
trace_president <- ggplot(data=Result_data_president) +
geom_line(aes(x = index, y=p.712.), color="blue") +
geom_line(aes(x = index, y=p.612.), color="green") +
geom_line(aes(x = index, y=p.512.), color="red") +
geom_line(aes(x = index, y=p.71.), color="black") +
geom_line(aes(x = index, y=p.61.), color="grey") +
geom_line(aes(x = index, y=p.51.), color="pink")
trace_president
trace_president_sigma <- ggplot(data=Result_data_president) +
geom_line(aes(x = index, y=Sigma.1.1.), color="blue") +
geom_line(aes(x = index, y=Sigma.11.10.), color="green") +
geom_line(aes(x = index, y=Sigma.2.10.), color="red") +
geom_line(aes(x = index, y=Sigma.4.10.), color="black") +
geom_line(aes(x = index, y=Sigma.3.10.), color="grey") +
geom_line(aes(x = index, y=Sigma.6.10.), color="pink")
trace_president_sigma
mean(as.data.frame(jags_sims_mv$BUGSoutput$summary)$Rhat)
mean(as.data.frame(jags_sims_senator$BUGSoutput$summary)$Rhat)
mean(as.data.frame(jags_sims_house$BUGSoutput$summary)$Rhat)
#full heatmap
heatMap <- get_heatmap(cor_mean)
biden_margin <-ggplot(president_polls_2020, mapping = aes(x=biden_margin)) +
geom_bar() +
labs(title = "Biden Margin", x = "Range")
biden_margin
sims
swing_state_share_interval_president <- kable(colQuantiles(sims+2, probs=c(0.025, 0.5, 0.975)), caption = "Swing State Share Percentage Interval Estimate (Biden)")
